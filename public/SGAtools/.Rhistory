t.test(c(1,2,3))
t.test(c(1,1,1))
t.test(c(1,1,3))
t.test(c(1,1,1.1))
t.test(c(1,10,50))
t.test(c(1,10,50))$pvalue
x = t.test(c(1,2,3))
x
x$p.value
x = t.test(c(1,2,3))$p.value
x
tt <- function(x) t.test(x)$p.value
tt(c(1,2,3))
tt(c(1,2,2))
tt(c(2.1,2,2))
tt(c(2.01,2,2))
tt(c(2,2,2))
all.equal(c(1,1,1))
all.equal(1, c(1,1))
all(c(1,1) 1)
all(c(1,1) ==1)
tt <- function(x) if(){
if(all(x == x[1])){
return(0)
}else{
return( t.test(x)$p.value )
}
}
tt <- function(x){
if(all(x == x[1])){
return(0)
}else{
return( t.test(x)$p.value )
}
}
tt(c(1,1,1))
sd.col = 1:10
pval.col = 11:20
sd.kvp = paste0('sd=', sd.col, ';', 'pval=', pval.col)
sd.kvp
tt(c(1,2))
sd(1,2)
sd(1,2,2)
sd(c(1,2))
tt(c(1,1))
tt(1,1,1)
tt(c(1,1))
tt(c(1,1,10))
tt(c(1,1,9))
tt(c(1,1,2))
tt(c(1,1,1.2))
all(x==x[1])
x
t.test(c(1,1,2), alternative="greater")
t.test(c(1,1,2), alternative="greater")$p.value
t.test(c(1,1,2))$p.value
t.test(c(1,1,2), alternative="lesser")$p.value
t.test(c(1,1,2), alternative="less")$p.value
tt <- function(x){
x=x[!is.na(x)]
if(length(x) <2 | all(x == x[1])){
return(NA)
}else{
return( t.test(x, alternative="greater")$p.value )
}
}
tt(c(1,1))
tt(c(1,2))
tt(c(1,1.1))
round(0.0004, 3)
round(0.00045, 3)
round(0.000455, 3)
round(0.000455, 6)
round(0.000455, 4)
print(load('~/Desktop/boone-summer-project-2012/web/sgatools/public/SGAtools/data/chrom_coordinates.Rdata'))
head(chrom_coordinates)
chrom_coordinates[chrom_coordinates[[1]] == "YOR102W"]
chrom_coordinates[chrom_coordinates[[1]] == "YOR102W",]
chrom_coordinates[chrom_coordinates[[1]] == "YOR202W",]
721947 - 516424
721947 - 516774
200 * 1e3
1e3/1000
require(jpeg)
x = readJPEG('~/Desktop/aug.jpg')[,1]
x = readJPEG('~/Desktop/aug.jpg')[,,1]
require(EBImage)
display(t(x))
x = readJPEG('~/Desktop/aug.jpg')[,,1]
display(t(x))
display(t(x))
display(thresh(t(x)))
display(thresh(t(x),w=20,20))
display(thresh(t(x),w=20,20, 0.01))
display(thresh(t(x),offset=0.01))
display(thresh(t(x),30,30))
display(thresh(t(x),40,40))
display(thresh(t(x),5,5))
gene.map = read.table('~/Downloads/results-table (1).tsv', sep='\t', header=T)
head(gene.map)
dim(gene.map)
x = gene.map
x = x[x[[2]] != '',]
dim(x)
x = readLines('~/Desktop/genemap.txt')
length9x
length(x)
g = strsplit(x, ',')
length(g)
g[1]
g = g[[1]]
length(g)
g1 = lapply(g, function(i) strsplit(i, ':')[[1]] )
head(g1)
g1 = do.call(rbind, g1)
head(g1)
g1 = as.data.frame(g1)
head(g1)
x = g1
genemap = x[[2]]
names(genemap) = x[[1]]
head(genemap)
class(genemap)
genemap = as.character(genemap)
head(genemap)
names(genemap) = x[[1]]
head(genemap)
save(genemap, file='~/Desktop/boone-summer-project-2012/web/sgatools/public/SGAtools/data/genemap.Rdata')
file.path(getwd(), "/data/chrom_coordinates.Rdata")
linkage.file = file.path(getwd(), "data","chrom_coordinates.Rdata")
linkage.file
x = c('A', 'YAL002W', 'YAL008W')
sc = x
ind = sc %in% names(genemap)
ind
sc[ind] = genemap[sc[ind]]
sc
x = c('a_1', 'b', 'c_2')
ret = x
ret = unlist( lapply(strsplit(ret, '_'), function(i) i[1]) )
ret
round(1.3242, 1)
round(1.3242, 0)
round(28973498273.3, 0)
order(c('b', 'a', 'c'))
x = c('omar_dm_sdkjf', 'omar_ctrl_dsjhfjk', 'omar_ctrl_ls', 'omar_lol_test')
grepl('_ctrl|_wt', x)
grepl('_ctrl|_wt', x[1])
grep('_ctrl|_wt', x[1])
grepl('_ctrl|_wt', x)
z = grepl('_ctrl|_wt', x)
c(x[!z], x[z])
?lowess
args = list()
args$linkagegenes = 'CAN1,LYP1,HELLO'
unlist(strsplit(args$linkagegenes, ','))
unlist(strsplit('', ','))
head(genemap)
z = names(genemap)
names(z) = genemap
head(z)
lengtH(z)
length(z)
length(unique(z))
z['']
x
g
args$linkagegenes
args$linkagegenes = unlist(strsplit(args$linkagegenes, ','))
z = names(genemap)
names(z) = genemap
ind = args$linkagegenes %in% names(z)
args$linkagegenes[ind] = z[args$linkagegenes[ind]]
args
z['CAN1']
z['LYP1']
a.start = 2000
a.end = 2500
(a.end - a.start)/2
mean(a.start, a.end)
mean(a.start, a.end)
a.start
a.end
mean(2000,2400)
mean(2000,2400,3)
mean(c(2000,2400))
unique(1,2)
unique(c(1,2))
source('~/Desktop/boone-summer-project-2012/web/sgatools/public/SGAtools/SGAtools.R')
source('~/Desktop/boone-summer-project-2012/web/sgatools/public/SGAtools/SGAtools.R')
x = readSGA('~/Downloads/nsnormalizationscoring-sgatools-c7ecde1f-b970-4b20-b9e2-0c8d86eb18d4/sgatools_ctrl_YOR102W_1_boonelab.jpg.dat')
head(x)
x = readSGA('~/Downloads/nsnormalizationscoring-sgatools-c7ecde1f-b970-4b20-b9e2-0c8d86eb18d4/sgatools_ctrl_YOR102W_1_boonelab.jpg.dat', ad.paths='~/Desktop/boone-summer-project-2012/web/sgatools/public/data/array-definitions/sga-array-ver2-1536/plate1')
head(x)
x = x[[1]]
head9
head(x)
print(load('~/Desktop/boone-summer-project-2012/web/sgatools/public/SGAtools/data/chrom_coordinates.Rdata'))
head(chrom_coordinates)
x = 1:3
x = readSGA('~/Downloads/nsnormalizationscoring-sgatools-c7ecde1f-b970-4b20-b9e2-0c8d86eb18d4/sgatools_ctrl_YOR102W_1_boonelab.jpg.dat', ad.paths='~/Desktop/boone-summer-project-2012/web/sgatools/public/data/array-definitions/sga-array-ver2-1536/plate1')
a.start = 2000
x = x[[1]]
head(x)
q = 1:3
w = 3:4
w = 3:5
w
q
mean(c(w,q))
chrom_coordinates$mid = apply(chrom_coordinates[,3:4], 1, mean)
head(chrom_coordinates)
mean(c(151168, 147596 ))
mean(c(138347, 137700 ))
mid.map = apply(chrom_coordinates[,3:4], 1, mean)
names(mid.map) = chrom_coordinates[[1]]
chr.map = chrom_coordinates[[2]]
names(chr.map) = chrom_coordinates[[1]]
head(mid.map)
head(chr.map)
plate.data = x
plate.data$array
linkage.genes
linkage.genes = c('CAN1', 'LYP1')
head(z)
linkage.genes  = z[linkage.genes ]
linkage.genes
array = YOR202W
array = 'YOR202W'
array %in% chrom_coordinates[[1]]
chr.map[g]
g = 'YOR102S'
chr.map[g]
head(chr.map)
g = 'YAL001C'
chr.map[g]
chr.map[g] == 1
any(c(T,F,T))
any(c(F,F,F))
linkage.genes = unique(c(plate.data$query, linkage.genes))
linkage.genes
linkage.genes = linkage.genes[ linkage.genes %in% chrom_coordinates[[1]] ]
linkage.egens
linkage.genes
ar = plate.data$array[1]
length(linkage.genes) == 0
length(linkage.genes) == 0 | ! ar %in% chrom_coordinates[[1]]
t = sapply(linkage.genes, function(g){
(chr.map[g] == chr.map[ar]) & (abs( mid.map[g] - mid.map[ar] ) < (linkage.cutoff * 1e3))
})
linkage.cutoff = 200
t = sapply(linkage.genes, function(g){
(chr.map[g] == chr.map[ar]) & (abs( mid.map[g] - mid.map[ar] ) < (linkage.cutoff * 1e3))
})
t
ar
chrom_coordinates[which((chrom_coordinates[[1]] ==ar)-1)):which((chrom_coordinates[[1]] ==ar)+1), ]
which((chrom_coordinates[[1]] ==ar)-1)
which(chrom_coordinates[[1]] ==ar
)
chrom_coordinates[6330:6335,]
linkage.genes
linkage.genes = c(linkage.genes, 'YOR203W')
t = sapply(linkage.genes, function(g){
(chr.map[g] == chr.map[ar]) & (abs( mid.map[g] - mid.map[ar] ) < (linkage.cutoff * 1e3))
})
t
linkage.genes = ''
t = sapply(linkage.genes, function(g){
(chr.map[g] == chr.map[ar]) & (abs( mid.map[g] - mid.map[ar] ) < (linkage.cutoff * 1e3))
})
t
any(T)
any(t)
is.logical(t)
t
t = sapply(linkage.genes, function(g){
(chr.map[g] == chr.map[ar]) & (abs( mid.map[g] - mid.map[ar] ) < (linkage.cutoff * 1e3))
})character(0)
character(0)
require(EBImage)
n = 400
x = (n/4)^2 - matrix(
(rep(1:n, times=n) - n/2)^2 + (rep(1:n, each=n) - n/2)^2,
nrow=n, ncol=n)
x = normalize(x)
seeds = array(0, dim=c(n,n))
seeds[51:55, 301:305] = 1
seeds[301:305, 101:105] = 2
seeds[201:205, 141:145] = 3
seeds[331:335, 351:355] = 4
lambda = 10^seq(-8, -1, by=1)
segmented = Image(dim=c(dim(x), length(lambda)))
lambda = 10^seq(-8, -1, by=1)
seq(-8, -1, by=1)
lambda = 10^seq(from=-8, to=-1, by=1)
lambda = 10^base::seq(from=-8, to=-1, by=1)
lambda
segmented = Image(dim=c(dim(x), length(lambda)))
for(i in seq(along=lambda)) {
prop = propagate(x, seeds, lambda=lambda[i])
prop = prop/max(prop)
segmented[,,i] = prop
}
if(interactive()){
display(x, title=â€™Imageâ€™)
for(i in seq(along=lambda)) {
prop = propagate(x, seeds, lambda=lambda[i])
prop = prop/max(prop)
segmented[,,i] = prop
}
for(i in base::seq(along=lambda)) {
prop = propagate(x, seeds, lambda=lambda[i])
prop = prop/max(prop)
segmented[,,i] = prop
}
display(x)
head(x)
head(plate.data)
tt <- function(x){
x=x[!is.na(x)]
if(length(x) <2 | all(x == x[1])){
return(NA)
}else{
return( t.test(x)$p.value )
}
}
df = plate.data
collapsed = ddply(df, c("query", "array"), function(df) {
c( mean(df$colonysize, na.rm=T) ,
paste0(unique(df$plateid), collapse=';') ,
paste0(unique(df$query), collapse=';') ,
paste0(unique(df$array), collapse=';') ,
mean(df$ncolonysize, na.rm=T),
mean(df$score, na.rm=T),
paste0(unique(df$kvp[!is.na(df$kvp)], na.rm=T), collapse=';'),
sd(df$score, na.rm=T),
tt(df$ncolonysize)
)
})
require(plyr)
collapsed = ddply(df, c("query", "array"), function(df) {
c( mean(df$colonysize, na.rm=T) ,
paste0(unique(df$plateid), collapse=';') ,
paste0(unique(df$query), collapse=';') ,
paste0(unique(df$array), collapse=';') ,
mean(df$ncolonysize, na.rm=T),
mean(df$score, na.rm=T),
paste0(unique(df$kvp[!is.na(df$kvp)], na.rm=T), collapse=';'),
sd(df$score, na.rm=T),
tt(df$ncolonysize)
)
})
head(collapsed)
str(collapsed)
collapsed = collapsed[,-c(1:2)]
head(collapsed)
collapsed = ddply(df, c("query", "array"), function(df) {
c( mean(df$colonysize, na.rm=T) ,
paste0(unique(df$plateid), collapse=';') ,
paste0(unique(df$query), collapse=';') ,
paste0(unique(df$array), collapse=';') ,
mean(df$ncolonysize, na.rm=T),
mean(df$score, na.rm=T),
paste0(unique(df$kvp[!is.na(df$kvp)], na.rm=T), collapse=';'),
sd(df$score, na.rm=T),
tt(df$ncolonysize)
)
})
head(collapsed)
collapsed[,1:2] = NA
head(collapsed)
x = 1:10
is.na(x)
a = 1:10
y = 5:10
sapply(a, function(x) x%in%y)
a
sapply(a, function(x) x==y)
do.call(|, c(T,F))
linkage.genes
x
linkage.genes = 'YOR102W'
linkage.genes = c('CAN1','LYP1','YOR102W')
head(z)
linkage.genes[1] = z[linkage.genes[1]]
linkage.genes
linkage.genes[2] = z[linkage.genes[2]]
ind = plate.data$array %in% chrom_coordinates[[1]]
ar = plate.data$array[ind]
head(ar)
linked = sapply(linkage.genes, function(g){
(chr.map[g] == chr.map[ar]) & (abs( mid.map[g] - mid.map[ar] ) < (linkage.cutoff * 1e3))
})
head(linked)
linked = apply(t, 1, any)
class(linked)
linked = apply(linked, 1, any)
head(linked)
sum(linked)
ar = plate.data$array
ar = c('1', ar)
linked = sapply(linkage.genes, function(g){
(chr.map[g] == chr.map[ar]) & (abs( mid.map[g] - mid.map[ar] ) < (linkage.cutoff * 1e3))
})
head(linked)
linked = apply(linked, 1, any)
head(linked)
linked[is.na(linked)] = FALSE
head(linked)
